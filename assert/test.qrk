{
  (let total 0)
  (let passed 0)
  (let failed 0)
  (let failedDetails (list))

  (let passedTime 0)
  (let failedTime 0)

  (let describeCount 0)

  (let formatTabs (fn () {
    (let i 0)
    (let result "")
    (while (< i describeCount) {
      (set result (+ result "  "))
      (set i (+ i 1))
    })
    (return result)
  }))

  (let it (fn (txt cb) {
    (let started (time:now))

    # Assert response
    (let res (cb))
    (let el1 (index res 0))
    (let el2 (index res 1))
    (let result (index res 2))

    # Elapsed formatting
    (let elapsed (- (time:now) started))
    /*
      < 100ms : green, good
      > 100ms && < 500ms : yellow, normal
      > 500ms: red, bad
    */
    (if (= result true)
      (set passedTime (+ passedTime elapsed))
      (set failedTime (+ failedTime elapsed))
    )
    # Printing result
    (print (+ (formatTabs) " ") (if (= el1 el2) (green "✓ ") (red "✕ ")) txt (formatTime elapsed))
    (return none)
  }))

  # Function that help screen formatting
  (let describe (fn (text tests) {
    (if (= describeCount 0) (print)) # Printing new line if new main describe
    (set total (+ total 1))
    (set describeCount (+ describeCount 1))

    # Formatting title
    (let title (bold (white (+ text ":"))))
    (print (+ (formatTabs) title))

    # Running tests
    (tests)
    (set describeCount (- describeCount 1))
  }))

  (if (> total 0) {
    (on:exit (fn () {
      # Printing tests results
      (print)
      (print " " (green (+ "✓ " (+ passed " tests complete"))) (formatTime passedTime))
      (print " " (red (+ "✕ " (+ failed " tests fail"))) (formatTime failedTime))

      (set passed 0)
      (print)

      # Checking if some tests have failed and then printing them
      (if (> failed 0) {
        (foreach failedDetails (fn (fail) {
          (let failTest (index fail 0))
          (print (+ (+ i 1) ")") (+ failTest ":"))
          (print (gray "  - Expected:") (index fail 1))
          (print (gray "  - Received:") (index fail 2))
        }))

        (throw)
      })
    }))
  })
}